0.1  MAKE IT HAPPEN  
--------------------------------------------------------------------------------
:::: What does `$*` mean inside a makefile?
--------------------------------------------------------------------------------

Answer:  It is a variable (actually * is the var, $ denotes that a var follows) that stands for the name of the .cpp file to be compiled into .out.
(Directory bound)

--------------------------------------------------------------------------------
:::: What is the purpose of `-Wall` and -g, when passed as arguments to g++?
--------------------------------------------------------------------------------

Answer: -Wall turns on additional warnings on compilation, and -g provide debug information after errors occur and crash the program.

--------------------------------------------------------------------------------
:::: What is the difference between an object file, and an executable?
--------------------------------------------------------------------------------

Answer: An object file represent a single file/unit used, while an executable is a compilation of (often) many object files including c++ libraries.

--------------------------------------------------------------------------------





0.2  HELLO WORLD
-------------------------------------------------------------------------------
:::: What is the purpose of `std::cout`, `std::cerr`, and `std::clog`,
     respectively?
-------------------------------------------------------------------------------

Answer: std::cout => standard c output, it writes output data to the user normally. 
        std::cerr => standard c error, it writes output data on a separate stream, mostly error messages. Unbuffered.
        std::clog => standard c log, same function as std::cerr except that this stream is not unbuffered. Could be used for the programmer to keep check of certain moments in the code compiling/buffering/usage.
-------------------------------------------------------------------------------




0.3  TRAIN SPOTTING

    int powerof (int x, int y) {
      int res = 1;

      for (int i = 0; i < y; ++i);
        res *= x;

      return res;
    }

    int main () {
      int const a = 2;
      int const b = 4;

      int   x = powerof(a, b); 
      float y = 3.1415;

      std::cout << a << "^" << b << " = " << x << ";\n";

      if (y == 3.1415)
        std::cout << y << " is equal to 3.1415!\n";
      else
        std::cout << y << " is not equal to 3.1415!\n";
    }

--------------------------------------------------------------------------------
:::: Why does not `powerof` return the expected value (16), when invoked with 2 and 4?
--------------------------------------------------------------------------------

Answer: The for loop is not properly defined since it is enclosed with the ";", and is not running the code res*=x; in its loops. The latter code is only runned once.

--------------------------------------------------------------------------------
:::: Why does not `y` compare equal to 3.1415?
--------------------------------------------------------------------------------

Answer: Floats cannot be compared using simple "==" operators, due to the sensitivity of decimals. One can instead compare using other arithmatic and then make a decision whether equality occur.

--------------------------------------------------------------------------------
:::: Is there any difference in behavior if we compare `y` to 3.1415f, if so: why?
--------------------------------------------------------------------------------

Answer: The code provide the expected output (they are equal) if we compare y to 3.1415f. The problem is partly that we havent declared whether the number we are comparing with is a float or a double, but then again some floats cannot be compared that easily. However, declaring the contstant with a number we have specified to be a float (using f) seemed to work this time. 

--------------------------------------------------------------------------------
:::: What is the recommended method to use when trying to determine if
:::: two floating-point values are equal, and why?
--------------------------------------------------------------------------------

Answer: To compare the difference between the two floating-point values by defining a threshhold and then see if the difference is within the threshhold. Since a float number contains so many digits, it becomes hard for the computer to store the exact value. Therefore the computer makes an approximation. Therefore normal comparison methods will not work because the two floats might not be equally stored.
--------------------------------------------------------------------------------


0.4 DOES IT FIT

int count_if_followed_by (char const * p, int len, char a, char b) {
  int        count = 0;
  char const * end = p + len;

  while (p != end) {
    if (*p == a && *(p+1) == b)
      count += 1;

    ++p;
  }

--------------------------------------------------------------------------------
:::: Why is it important to test the boundary conditions of an implementation,
     especially in the case of `count_if_followed_by`?
--------------------------------------------------------------------------------

Answer: In this case count_if_followed_by can in special cases go outside the boundry of the vector, which will cause errors. More generally, stepping out of boundries can cause strange (runtime!) errors (exceptions). Therefore, if one uses something that checks the next element, (or previous) boundry checking is a time-saving tool for the programmer (who will have to struggle in finding the bug if the program crash during runtime). 

--------------------------------------------------------------------------------



0.5 WILL IT FLOAT (birth.cpp)

class A {
public:
   A () {
     std::cout << "default-constructor" << std::endl;
   }

   A (A const& src) {
     std::cout << "copy-constructor" << std::endl;
   }

  ~A () {
    std::cout << "destructor" << std::endl;
  }

   A(char const* s) {
      std::cout << "some other constructor" << std::endl;
   }

   A& operator= (A const& src) {
     std::cout << "the assignment operator" << std::endl;
     return *this;
   }
};

void no_ref(A a) {}
void with_ref(const A & a) {}

int main()
{
    A a("my name is a");

    A b = a;          // what is the difference
    A c(a);           // between these three
    A d;              // forms of initialization?

    d = a;

      no_ref (a);     // will this copy the value of `a`?
    with_ref (a);     // will this copy the value of `a`?

    A *aa = new A[5];
    delete aa;        // what will happen?
    return 0;
}

--------------------------------------------------------------------------------
:::: What different constructors are invoked, and when?
--------------------------------------------------------------------------------

Answer: 1. some other constructor
		2. copy-constructor
		3. default-constructor
		
		1. is invoked when we construct A with some sort of indata which does not have an adress (no specific spot in the memory, in this case a string).
		
		2. is invoked when we have indata from an object, and wishes to assign the data from that object onto the object we are creating (simply speaking, this constructor is invoked when we wish to create a replica of some other object)
		
		3. is invoked when we simply wish to create an instance of A, with no special indata or references.

--------------------------------------------------------------------------------
:::: Will there be any temporaries created, if so; when?
--------------------------------------------------------------------------------

Answer: Temporaries will be created by this code whenever we run the function no_ref(A a). A copy of A will be created here. The function with_ref(A a) won't create a temporary since the object a we are using is a referral to another object. 

--------------------------------------------------------------------------------
:::: When are the objects destructed, and why?
--------------------------------------------------------------------------------

Answer: The objects are destroyed at the end of the function body (just before we exit the function) and the memory-allocated array aa is destroyed by the command 'delete'. Objects created without the "new" operator, as well as temporaries, are not memory-allocated and therefore they have a limited lifespan, limited to the function body, while aa is in the memory and will stay there until manually removed in 'delete'.

--------------------------------------------------------------------------------
:::: What will happen if we try to free the dynamically allocated
:::: memory through `delete p`, instead of `delete [] p`?

Answer: The delete function deletes the pointer to p and what it points to. However, in an array the pointer points to the address (which would be the first element in the array). So when delete is used on an array we get a memory leak since not all elements are deleted. It is quite hard to further explain what happens, since this behaviour is undefined. (note: With 'delete[]' the destructor is given the number of elements to destroy.)

--------------------------------------------------------------------------------
:::: valgrind indicates that there is something wrong with birth.cpp, what and
:::: why?
--------------------------------------------------------------------------------

Answer: Valgrind states that there is a memory leak of 13 bytes in 1 block. This is due to we used "delete" and not "delete[]", whereas the later deletes the entire array and the first "delete" had undefined behaviour.
--------------------------------------------------------------------------------
0.5 WILL IT FLOAT (bad_plumming.cpp)

struct Data {
    int x, y, z;
};  

Data ** foo(Data ** v, int x) {
    for (int i = 0; i < x; i++)
        if (v[i] != 0)
            v[i] = new Data;
    return v;
}

int main () {
    const int size = 5;
    Data ** v = new Data * [size];
    foo(v, size);
}

--------------------------------------------------------------------------------
:::: valgrind indicates that the program suffers from a few problems, which and
:::: why?
--------------------------------------------------------------------------------

Answer: We have a memory leak of 40 bytes in 1 block, along with 6 errors. In the code, we create a new array of Data - types, which are of type struct, and therefore allocate memory to the number of structs (5) without ever calling delete[] - alas the memory leak. 


--------------------------------------------------------------------------------
:::: If you comment out the entire if-block in foo, is there any difference in
:::: how much memory that is leaked?
--------------------------------------------------------------------------------

Answer: No, since the if-statements body never runs due to the data Array which v points to have a default value of 0 on every element. It is not certain that the int x,y,z always have the default value 0 - it depends on the used compiler. 

--------------------------------------------------------------------------------
:::: Revert bad_plumming.cpp to its original state, and comment out
:::: only the line that contains the if-condition.
::::
:::: If you now change the last line of `main` to the following; why is it
:::: that valgrind still issue diagnostics related to memory management?
::::
:::: Data ** p = foo (v, size);
:::: delete [] p;
--------------------------------------------------------------------------------

Answer: The code within the for-loop is the culprit in this scenario. The Data ** v is created as an array of pointers, whereas each index holds a pointer to a struct we create using the 'new' operator. When we use [] delete on v, (or p, which is a copy of v with filled structs), the array of pointers will indeed be deleted, but not the structs the pointers point at. They will remain, as delete a pointer does not delete the thing it points at - there is no such garbage collection in c++. 

--------------------------------------------------------------------------------



0.6  THE SIMPLE CONTAINER
--------------------------------------------------------------------------------
:::: `operator[]` must in some cases be marked as `const`, but not always; when,
:::: and why?
--------------------------------------------------------------------------------

Answer: In our vector, it should always be marked as const since operator [] is only returning the element at index i -and should not change anything in the class persay. However, consider the scenario when one wishes to increment some parameter whenever index, say, 1 is accessed. Having the operator[] marked as 'const' prohibits us from doing this desired task, and therefore 'const' should in that case not exist in the member function. 

--------------------------------------------------------------------------------
:::: The semantics of copying a UIntVector might not be trivial; why must we 
:::: manually implement the relevant code, instead of having the compiler generate
:::: it for us?
--------------------------------------------------------------------------------

Answer: The class has the important parameters 'capability' and 'elemAmnt' which specify how many elements this vector can carry, and how many it currently got. These would not be initialized with proper values if we allowed the compiler to perform the copy operator instead of us specifying what it should do. 

--------------------------------------------------------------------------------



0.7  THE TEMPLATE VECTOR
--------------------------------------------------------------------------------
:::: Iterating over a range of elements can be done with a range-based for-loop,
:::: but the type of `source` must meet certain requirements; what are they?
--------------------------------------------------------------------------------

Answer: The source must be a countable sequence (finite), and consequenlty the source must define "begin()" and "end()" , where begin() points to the first element of the container, and end() 1 step after the last element in the container. This allows the range-based for loop to iterate over a sequence, with start and end given.

--------------------------------------------------------------------------------
:::: The C++ Standard sometimes state that a type in the Standard Library is
:::: "unspecified"; why do you think that is?
--------------------------------------------------------------------------------

Answer: "unspecified" allows the programmer to adapt the library to his/hers code, without being restricted by the type of the library. For example, our method "find" returns a T * pointer, but it might as well had returned a number instead of a pointer. However in this case, the implementation of find would have been different - alas we adapted a function with an unspecified type to our needs, and got the type we wanted. 

--------------------------------------------------------------------------------



